# a = 3 + 3.0 + 4
# print(a)
# print(type(a))


'''№8
Какой результат дадут выражения int(5.2) и math.trunc(5.2)? Есть ли разница при любых случайных аргументах?
Что функция int(), что метод trunc() из модуля math дают одинаковые результаты. По факту, это аналоги, реализующие следующий механизм: отсекается дробная часть и возвращается целочисленное значение с сохранением знака.
Какие бы аргументы мы сюда не передавали, итог вычисления всегда будет одинаковым.'''

# from math import trunc
# print(int(5.2))
# print(trunc(5.2))
# print(int(5.2) == trunc(5.2))


'''Напишите функцию to_float(num),
которая преобразует любое число в число с плавающей точкой.
Если в качестве аргумента передан другой тип данных,
она возвращает «Невозможно преобразовать».'''

# def to_float(num):
#     if isinstance(num, (int, float)):
#         return float(num)
#     return "Невозможно преобразовать"
#
# print(to_float('121'))
# print(to_float(-1.76))
# print(to_float(True))
# print(to_float('нет'))


'''№2
Дано 4 числа. 
Нужно написать функцию avg_5(a, b, c, d),
которая возвращает среднее арифметическое аргументов
и округляет его до 5 знаков после запятой.'''

# def avg_5(a, b, c, d):
#     return round((a + b + c + d) / 4, 5)
#
# print(avg_5(5,8,13,1.3))
# print(avg_5(1.5,6.5,8,10))
# print(avg_5(3, -3.13335,-4.76,3.14))


'''№3
Функция mul_to_int(a, b) может принимать целые или вещественные числа. 
Если результат умножения аргументов не имеет значимых чисел после запятой,
то она возвращает его в виде целого числа. 
В противном случае – в виде float.'''

# def mul_to_int(a, b):
#     result = a * b
#     if float(result).is_integer():
#         return int(result)
#     return result
#
# print(mul_to_int(2, 4))
# print(mul_to_int(2.5, 4))
# print(mul_to_int(2.2, 2))